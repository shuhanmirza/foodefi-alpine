// Code generated by sqlc. DO NOT EDIT.
// source: event_field.sql

package db

import (
	"context"
)

const createEventField = `-- name: CreateEventField :one
INSERT INTO event_fields (event_id,
                          name,
                          type,
                          value,
                          recorder)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, event_id, name, type, value, recorder, created_at
`

type CreateEventFieldParams struct {
	EventID  int64  `json:"event_id"`
	Name     string `json:"name"`
	Type     string `json:"type"`
	Value    string `json:"value"`
	Recorder string `json:"recorder"`
}

func (q *Queries) CreateEventField(ctx context.Context, arg CreateEventFieldParams) (EventFields, error) {
	row := q.db.QueryRowContext(ctx, createEventField,
		arg.EventID,
		arg.Name,
		arg.Type,
		arg.Value,
		arg.Recorder,
	)
	var i EventFields
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Type,
		&i.Value,
		&i.Recorder,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEventField = `-- name: DeleteEventField :exec
DELETE
FROM event_fields
WHERE id = $1
`

func (q *Queries) DeleteEventField(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEventField, id)
	return err
}

const getEventFieldById = `-- name: GetEventFieldById :one
SELECT id, event_id, name, type, value, recorder, created_at
from event_fields
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetEventFieldById(ctx context.Context, id int64) (EventFields, error) {
	row := q.db.QueryRowContext(ctx, getEventFieldById, id)
	var i EventFields
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Type,
		&i.Value,
		&i.Recorder,
		&i.CreatedAt,
	)
	return i, err
}

const listEventFields = `-- name: ListEventFields :many
SELECT id, event_id, name, type, value, recorder, created_at
FROM event_fields
ORDER BY event_id
`

func (q *Queries) ListEventFields(ctx context.Context) ([]EventFields, error) {
	rows, err := q.db.QueryContext(ctx, listEventFields)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventFields{}
	for rows.Next() {
		var i EventFields
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.Type,
			&i.Value,
			&i.Recorder,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
